Shader "Sam'Shader编程/基本标签和语句.Shader" {

	SubShader{

		//-------------------------Tags---------------------------
		//后台（Background） - 这个渲染队列在所有队列之前被渲染，
		//		被用于渲染天空盒之类的对象。

		//几何体（Geometry，默认值） - 这个队列被用于大多数对象。 
		//		不透明的几何体使用这个队列。

		//透明（Transparent） - 这个渲染队列在几何体队列之后被渲染，
		//		采用由后到前的次序。任何采用alpha混合的对象（也就是
		//		不对深度缓冲产生写操作的着色器）应该在这里渲染（如玻璃，
		//		粒子效果等）

		//覆盖（Overlay） - 这个渲染队列被用于实现叠加效果。
		//		任何需要最后渲染的对象应该放置在此处。（如镜头光晕等）

		// 1000
		//"Queue" = "Background" 
		// 2000
		// = "Geometry"
		// 3000
		// = "Transparent"
		// 4000
		// = "Overlay"

		Tags{"Queue" = "Transparent" }
		//---------------------------------------------------------

		//-------------忽略投影标签IgnoreProjector tag-------------------------
		//后面我们会接触到，若设置IgnoreProjector（忽略投影）标签为"True"，
		//那么使用这个着色器的对象就不会被投影机制（Projectors）所影响。
		//这对半透明的物体来说是一个福利，因为暂时没有对他们产生投影的比较
		//合适的办法，那么直接忽略掉就行了。
		//---------------------------------------------------------

		//------------光照模式标签（LightMode tag）------------------
		/*
		Always: 总是渲染。没有运用光照。
		ForwardBase : 用于正向渲染,环境光、方向光和顶点光等
		ForwardAdd : 用于正向渲染，用于设定附加的像素光，每个光照对应一个pass
		PrepassBase : 用于延迟光照，渲染法线 / 镜面光。
		PrepassFinal : 用于延迟光照，通过结合纹理，光照和自发光渲染最终颜色
		Vertex : 用于顶点光照渲染，当物体没有光照映射时，应用所有的顶点光照
		VertexLMRGBM : 用于顶点光照渲染，当物体有光照映射的时候使用顶点光照渲染。在平台上光照映射是RGBM 编码
		VertexLM : 用于顶点光照渲染，当物体有光照映射的时候使用顶点光照渲染。在平台上光照映射是double - LDR 编码（移动平台，及老式台式CPU）
		ShadowCaster : 使物体投射阴影。
		ShadowCollector : 为正向渲染对象的路径，将对象的阴影收集到屏幕空间缓冲区中。
		*/
		//---------------------------------------------------------

		Pass{



		}


	}
	FallBack "Diffuse"
}
